name: iOS Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
    # 1. リポジトリをチェックアウト
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. CocoaPods があればインストール
    - name: Install dependencies
      run: |
        if [ -f "Podfile" ]; then
          pod install
        fi
      working-directory: MyiOSApp

    # 3. Provisioning Profile を復元
    - name: Decode and install provisioning profile
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$MOBILEPROVISION" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/MyiOSApp.mobileprovision
      env:
        MOBILEPROVISION: ${{ secrets.MOBILEPROVISION }}

    # 4. 証明書を Keychain にインポート
    - name: Import certificate to keychain
      run: |
        echo "$CERTIFICATE" | base64 --decode > /tmp/certificate.p12
        security create-keychain -p "" build.keychain
        security import /tmp/certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain
        security find-identity -v -p codesigning
      env:
        CERTIFICATE: ${{ secrets.CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

    # 5. Xcode でアーカイブ作成
    - name: Build app (archive)
      run: |
        xcodebuild \
          -project MyiOSApp.xcodeproj \
          -scheme MyiOSApp \
          -sdk iphoneos \
          -configuration Release \
          -archivePath $PWD/build/MyiOSApp.xcarchive \
          -allowProvisioningUpdates archive \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          PROVISIONING_PROFILE_SPECIFIER="MyiOSApp_AdHoc_Profile" \
          DEVELOPMENT_TEAM="${{ secrets.TEAM_ID }}"
      working-directory: MyiOSApp

    # 6. .ipa にエクスポート
    - name: Export IPA
      run: |
        xcodebuild -exportArchive \
          -archivePath $PWD/build/MyiOSApp.xcarchive \
          -exportOptionsPlist ExportOptions.plist \
          -exportPath $PWD/build
      working-directory: MyiOSApp

    # 7. .ipa を Artifact としてアップロード
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: MyiOSApp-ipa
        path: MyiOSApp/build/*.ipa

    # 8. Render 配布用 static/ にコピー
    - name: Prepare static directory
      run: |
        mkdir -p MyiOSApp/static
        cp build/MyiOSApp.ipa MyiOSApp/static/
        cp Manifest.plist MyiOSApp/static/
        cp index.html MyiOSApp/static/
      working-directory: MyiOSApp

    # 9. static/ をコミット & Push（Render 自動デプロイ用）
    - name: Commit and push static files
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add MyiOSApp/static
        git commit -m "Deploy ipa and plist to static for Render" || echo "No changes to commit"
        git push origin main